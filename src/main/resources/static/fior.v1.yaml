openapi: 3.0.0
info:
  title: fior
  version: 1.0.0
  description: Rest API for fior (mentoring platform)
  contact:
    name: Udesh Kumarasinghe
    url: 'https://www.udesh.xyz'
    email: mail@udesh.xyz
  license:
    name: Proprietary
servers:
  - url: 'http://localhost:8080/v1'
    description: Local
  - url: 'https://api.fior.app/v1'
    description: Production
paths:
  /auth/signup:
    post:
      summary: signUp
      tags:
        - Auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: signUp
      description: Create new user with email and password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
  /auth/signin/email:
    post:
      summary: signInEmail
      tags:
        - Auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: signInEmail
      description: Authenticate an user with email and password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInEmailRequest'
    parameters: []
  /auth/signin/google:
    post:
      summary: signInGoogle
      tags:
        - Auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: signInGoogle
      description: Authenticate an user with Google
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInGoogleRequest'
  /auth/forgotPassword:
    post:
      summary: forgotPassword
      tags:
        - Auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: forgotPassword
      description: Request password reset when password is forgotten
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
  /auth/resetPassword:
    get:
      summary: checkResetPassword
      tags:
        - Auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: checkResetPassword
      description: Check whether a password reset request exists for given reset token
      parameters:
        - schema:
            type: string
          in: query
          name: token
          description: Reset token from the email
    post:
      summary: resetPassword
      tags:
        - Auth
      operationId: resetPassword
      description: Reset user password using a reset token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/me:
    get:
      summary: getMe
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: getMe
      description: Get currently authenticated user
      security:
        - token: []
    put:
      summary: updateMe
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: updateMe
      description: Update currently authenticated user
      security:
        - token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
  /users/me/sendEmailConfirmation:
    post:
      summary: sendEmailConfirmation
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: sendEmailConfirmation
      description: "Send email confirmation to authenticated user's email"
      security:
        - token: []
  /users/me/confirmEmail:
    post:
      summary: confirmEmail
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: post-users-me-confirmEmail
      description: Confirm email of authenticated user with confirmation token from email
      security:
        - token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmEmailRequest'
  /users/me/changePassword:
    post:
      summary: changePassword
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: changePassword
      description: Change password of currently authenticated user
      security:
        - token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
  /questions:
    get:
      summary: getQuestions
      tags:
        - Question
      responses: {}
      operationId: getQuestions
    post:
      summary: createQuestion
      tags:
        - Question
      responses: {}
      operationId: post-questions
components:
  schemas:
    SignUpRequest:
      title: SignUpRequest
      type: object
      x-tags:
        - Model
      description: Request with new user data
      properties:
        name:
          type: string
          minLength: 1
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - name
        - email
        - password
    ErrorResponse:
      title: ErrorResponse
      type: object
      x-tags:
        - Model
      description: Response with data of a error
      properties:
        message:
          type: string
      required:
        - message
    SuccessResponse:
      title: SuccessResponse
      type: object
      description: Response with data of a successful operation
      properties:
        message:
          type: string
      required:
        - message
      x-tags:
        - Model
    SignInEmailRequest:
      title: SignInEmailRequest
      type: object
      x-tags:
        - Model
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password
      description: Request with email and password authentication data
    SignInResponse:
      title: SignInResponse
      type: object
      description: 'Response with data of successful authentication '
      properties:
        token:
          type: string
      required:
        - token
      x-tags:
        - Model
    SignInGoogleRequest:
      title: SignInGoogleRequest
      type: object
      description: Request with Google authentication data
      properties:
        idToken:
          type: string
      required:
        - idToken
      x-tags:
        - Model
    ForgotPasswordRequest:
      title: ForgotPasswordRequest
      type: object
      x-tags:
        - Model
      description: Request with password forgotten users data
      properties:
        email:
          type: string
          format: email
      required:
        - email
    User:
      title: User
      type: object
      x-tags:
        - Model
      description: Model with user data
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        emailValid:
          type: boolean
        hasPassword:
          type: boolean
      required:
        - id
        - name
        - email
        - emailValid
        - hasPassword
    ResetPasswordRequest:
      title: ResetPasswordRequest
      type: object
      x-tags:
        - Model
      description: Request with reset password data
      properties:
        token:
          type: string
        password:
          type: string
          format: password
      required:
        - token
        - password
    UserUpdateRequest:
      title: UserUpdateRequest
      type: object
      x-tags:
        - User
      description: Request with user update data
      properties:
        email:
          type: string
          format: email
        name:
          type: string
    ConfirmEmailRequest:
      title: ConfirmEmailRequest
      type: object
      x-tags:
        - Model
      description: Request with confirm email data
      properties:
        token:
          type: string
      required:
        - token
    ChangePasswordRequest:
      title: ChangePasswordRequest
      type: object
      x-tags:
        - Model
      description: Request with change password data
      properties:
        oldPassword:
          type: string
          format: password
        newPassword:
          type: string
          format: password
      required:
        - oldPassword
        - newPassword
    QuestionCreateRequest:
      title: QuestionCreateRequest
      type: object
      x-tags:
        - Model
      description: Request with new question data
      properties:
        title:
          type: string
        description:
          type: string
      required:
        - title
        - description
    QuestionUpdateRequest:
      title: QuestionUpdateRequest
      type: object
      x-tags:
        - Model
      description: Request with question update data
      properties:
        title:
          type: string
        description:
          type: string
  securitySchemes:
    token:
      type: http
      scheme: bearer
      description: Access token using JWT produced by auth endpoints
tags:
  - name: Auth
    description: Endpoints related to authentication
  - name: User
    description: Endpoints related to users
  - name: Models
    description: Models of the API
